#+TITLE:     Lecture 03 Notes
#+AUTHOR:    Derek Harter
#+EMAIL:     derek@harter.pro
#+DATE:      CSci 515 Spring 2014 <2015-01-28 Wed>
#+DESCRIPTION: Lecture 03 Notes.
#+OPTIONS:   H:4 num:t toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc

* First Session (11 - 11:40)
** Streams
The IOStream library is a new (object oriented) library, added with the C++
language, to support Input and Output to source and destination devices.

The source of input can be a keyboard, a file, or some other device.  Likewise
the destination of output can be to a file, to a terminal screen, or to some
other device (for example you can send output into another C variable, like
a string in memory).

A stream is a way of visualizing how data is transferred from the source to 
destination.  A stream is inherently serial, the order in which you put things
into the stream, is the order they will be received when they come out of the
stream.

** iostream header
You've already seen many examples of specifying the iostream header using

#+begin_src c
#include <iostream>
#+end_src

Iostream operators and objects are defined in the std namespace, thus you
explicitly have to specify ~std::~ before using them, or include the

#+begin_src c
using namespace std;
#+end_src

directive.

In addition to iostream, if you want to do I/O to files, you need to include
the fstream header.  If you want to manipulate and format the data in/out of
the stream, you need to include the iomanip header.

** Standard Stream Objects

- cin, cout input from the standard input device, and output to the
  standard error device respectively.  These are the keyboard and
  terminal, by default, but can be connected to others (like a file)
  by the OS, and program doesn't know or care.
- cerr send output to the standard error device, can be useful for
  separating error messages from normal output (and redirecting
  standard error to a different location).  By default, standard error
  also goes to the terminal.
- clog also connects to the standard error output in a buffered
  manner.  You don't need to be concerned with clog in this class.

** Stream Output and Input

- using the ~<<~ ~>>~  stream notation
#+begin_src c
cout << x << y << z;
cin >> x << y << z;
#+end_src

- Using member functions.  The streams cout, cin, are objects, they have
  member functions.  For example, and put and get single characters:

#+begin_src c
cout.put('A').put('\n');
cin.get(c);
#+end_src

- Example of reading a character at a time of input and echoing until EOF

#+begin_src c
int c; // use int, because char cannot represent EOF
while ( (character = cin.get()) != EOF)
{
  cout.put(character);
}
#+end_src

- Example of reading input a line at a time 

#+begin_src c
const int SIZE = 80;
char buffer[SIZE];

cin.getline(buffer, SIZE);
#+end_src

- peek, putback and ignore can be used for low level I/O.  We can
  ignore a number of characters, and we can peek ahead (without
  reading) or putback a character into the stream.



* Second Session (11:45 - 12:30)
** Formatted I/O

- We can display integers in any base,  using hex, oct, dec and setbase()
- For float/double types, use cout.precision(p) or setprecision(p) 
  manipulator to set number of decimal places shown.
- For float/double, you can force fixed or scientific notation output
  using those output stream manipulators.
- 

* Third Session (12:40 - 1:40)

