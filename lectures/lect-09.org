#+TITLE:     Lecture 09 Notes
#+AUTHOR:    Derek Harter
#+EMAIL:     derek@harter.pro
#+DATE:      CSci 515 Spring 2015 <2015-03-31 Tue>
#+DESCRIPTION: Lecture 09 Notes.
#+OPTIONS:   H:4 num:t toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc

* First Session (11 - 11:40)
** Introduction to Analysis of Algorithms
Analysis of algorithms is a branch of computer science that studies
the performance of algorithms, especially their run time and space
requirements.  Most classes tend to emphasize the run time complexity,
but space complexity can be just as important, e.g if your program
can't fit into the size of primary memory for a supercomputing
application, if often will go from being feasible to compute, to
impossible.

- The practical goal if analysis of algorithms is to predict the
  perormance of different algorithms, as a function of the input size,
  in order to guide design decisions.
- The goal is to make meaningful comparisons between algorithms, but
  some problems:
  - The relative performance might depend on characteristics of hardware.
    Alg 1 faster machine A, Alg 2 faster machine B.  Specify a machine model.
  - Relative performance might depend on details of dataset.  Thus usually
    look at best, worst and average case behavior.
  - Relative importance depends on the size of the input.  A sorting
    algorithm will be slower for a small list than for a very large one.
- Usual solution for last: specify run time (or number of operations)
  as a function of problem size.  Compare functions *asymptotically* 
  as the problem size increases.

** Order of Growth
Suppose you have analyzed two algorithms and expressed their run times in
terms of the size of the input: Algorithm A takes $100n + 1$ steps
to solve a problem with size $n$; Algorithm B takes $n^2 + n + 1$ steps.

Which algorithm is "better" in terms of time complexity (number of steps)?

The following table shows run time of algorithms for different problem sizes:

| Input | Run time of | Run time of |
|  size | Algorithm A | Algorithm B |
|-------+-------------+-------------|
|    10 |        1001 |         111 |
|   100 |       10001 |       10101 |
|  1000 |     100 001 |     1001001 |
| 10000 |     1000001 | $> 10^{10}$ |

- Big O notation
- Time and Space
- Relative growth as a function of the size $N$ of input.

* Second Session (11:45 - 12:30)
** Sorting Arrays
- Bubble Sort
- Insertion Sort
- Merge Sort


* Third Session (12:40 - 1:40)

| *Algorithm*    | *Best case*  | *Expected*   | *Worst case* |
| Bubble sort    | $O(N^2)$     | $O(N^2)$     | $O(N^2)$     |
| Insertion sort | $O(N^2)$     | $O(N^2)$     | $O(N^2)$     |
| Merge Sort     | $O(N log N)$ | $O(N log N)$ | $O(N log N)$ |
| Linear search  | $O(1)$       | $O(N)$       | $O(N)        |
| Binary search  | $O(1)$       | $O(log N)$   | $O(log N)$   |
