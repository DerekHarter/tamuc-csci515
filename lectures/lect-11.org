#+TITLE:     Lecture 11 Notes
#+AUTHOR:    Derek Harter
#+EMAIL:     derek@harter.pro
#+DATE:      CSci 515 Spring 2015 <2015-04-07 Tue>
#+DESCRIPTION: Lecture 10 Notes.
#+OPTIONS:   H:4 num:t toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc

* First Session (11 - 11:40)
** Refresher on memory concepts
- Memory consists of a sequence of numbered addresses (each holding 1 byte of information)
- Addresses can be accessed randomly (Random Access Memory).  It
  takes the same amount of time to access any particular address in
  primary memory (O(1), or constant time).
- When you declare a variable in C, you allocate memory at some
  particular address in memory to hold the value you assign to the
  variable.
- The type of the variable determines the size, or number of bytes
  of memory, needed to hold the variable.
- The type also determines the interpretation of the bit pattern in
  memory of those bytes.

** Pointers Introduction
- A declared variable actually is associated with a memory address.  In C compiler, 
  a look up table translates every variable name reference to the associated address when
  creating the machine code.
- Pointer variables contain *memory addresses* as their values.
- *Pointer variables contain MEMORY ADDRESSES as their values.*
- We use pointers indirectly. *indirect referencing*
- We dereference a pointer, in order to access the value it is pointing too.
- Confusing for some people, a pointer variable holds a memory address, but we still
  associate a type with a pointer variable.  
  - Because, when we dereference a pointer variable, we need to know
    how to interpret the bit pattern in memory that it is pointing
    too.

** Pointer Variables
- Pointers, like any other variable, must be declared before they can be used.
#+begin_src C
int count;
int* countPtr;

double x;
double* xPtr;
#+end_src
- Do not declare multiple pointer variables using single line declaration. Always
  declare pointers on their own line.
- It is good practice to use Ptr on name of variable, to indicate they
  are pointer variables.
- Please follow our class convention, and put the * next to type, to indicate it is
  a pointer to the indicated type.
- Pointers must be initialized before they can be used (like any other variable). 
  - It is a common, and *very bad not to ever be done* error to try and dereference
    an uninitialized pointer.  Bad things will happen, don't do it.
- Pointers can be initialized to 0 or NULL, but *never dereference a null pointer*.


* Second Session (11:45 - 12:30)
** Pointer Operators: Address of Operator
- How do we initialize a pointer?
- Well obviously, pointers hold memory addresses, so we have to initialize with a memory address.
- How do we found out memory address of interest?
- use ~&~ operator.  Read as the *address of* operator.
#+begin_src C
int y = 5;
int* yPtr;

yPtr = &y; // assign address of y to yPtr
#+end_src
- As we just did to initialize y to an integer value when declaraing, we can also initialize
  a pointer variable in declaration, thus:
#+begin_src C
int y = 5;
int* yPtr = &y;
#+end_src

** Pointer Operators: dereference operator
- Ok we can declare a pointer, and point it at something.  What use is that?
- When a pointer is validly referencing memory, we can derefrence it
  and use the dereferenced location anywhere we could use a simple variable
  of the given type.
- Derefernce to read value out and display it.  Operator ~*~ is the *dereference* operator.
#+begin_src C
cout << *yPtr << endl;
#+end_src
- Can dereference to read value out, and use it in any arbitray expression
#+begin_src C
int x = 3;
x = *yPtr + 5;
#+end_src
- Dereference to write value to reference memory location
#+begin_src
*yPtr = 9; // assign value 9 to location referenced in yPtr (e.g. to variable y)
cout << *yPtr << endl;
cout << y << endl;
#+end_src
- Can also assign value using IOstream input
#+begin_src
cin >> *yPtr;
#+end_src

** Memory Addresses, again
- Lets look at the actual values in one of our pointer variables
#+begin_src C

#+end_src

* Third Session (12:40 - 1:40)
** Pass by Reference

** Multiple Indirection

** Pointers to Structs and Struct Members
