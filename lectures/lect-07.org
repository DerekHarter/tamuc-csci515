#+TITLE:     Lecture 07 Notes
#+AUTHOR:    Derek Harter
#+EMAIL:     derek@harter.pro
#+DATE:      CSci 515 Spring 2015 <2015-02-18 Wed>
#+DESCRIPTION: Lecture 07 Notes.
#+OPTIONS:   H:4 num:t toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc

* First Session (11 - 11:40)
** Multidimensional Arrays

- Two-dimensional arrays represent *TABLES* of values
- Tables are a very fundamental data structure/concept.  Represent
  the basic type of a relational database, for example.
- Information arranged in rows and columns (we have seen this before
  in our lab where we looked at DSV separated data).
- By convention, the first identifier for a 2-D array specifies the
  table's row, and the second identifier specifies the column.
- This makes sense, as the row is the *record* or *trial* of a table
  e.g. it is the set of related information.
- The column is a particular attribute or piece of information about
  a record or trial.
- So, to initialize a 2-D array:

#+begin_src c
const int NUM_RECORDINGS = 5; // number of rows in table
const int NUM_DIMENSIONS = 3; // number of columns in table

// Each recording records a 3-dimensional position of a particle in
// our experiment
float experimentPositions[NUM_RECORDS][NUM_DIMENSIONS];
#+end_src

- For 1-D arrays, the size of the array was not required by compiler
  when passing array (by reference) to a function.  Though we always
  specified the size of the array as the next parameter for our functions.

- For 2-D arrays, the number of rows (the first dimension) is still not
  required by compiler, though again we will almost always pass this
  information in to the function because it is needed to process the
  2-D array.
- However, the compiler needs the number of columns to be specified, 
  because reasons.
  - reasons: arrays are stored using row major ordering, thus we need to
    know the number of columns in order to correctly calculate item
    position.
- 

* Second Session (11:45 - 12:30)
** More array Operations
- Shifting elements in an array
- Add element to an array
- Remove element from an array


* Third Session (12:40 - 1:40)


