#+TITLE:     Lecture 05 Notes
#+AUTHOR:    Derek Harter
#+EMAIL:     derek@harter.pro
#+DATE:      CSci 515 Spring 2015 <2015-02-13 Fri>
#+DESCRIPTION: Lecture 05 Notes.
#+OPTIONS:   H:4 num:t toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc

* First Session (11 - 11:40)
** Scope Rules
- Variables declared in functions are local to the function.
- Variables (and constants) declared outside of functions are global.
- You probably should NOT be using global variables.  Global variables allow
  state information to leak between functions.
- Global constants, however, are often a good idea and useful.
- Understanding the scope of variables is important.  Limiting scope of
  variables is important.

** Passing Parameters by Reference
- Variables are passed to functions by value by default.
- This means, the value is copied, and if you change value in the
  function, the value is not changed in the caller.
- The only way to get a value back to the caller, is to return it
  as the return result from the function.
- However, sometimes we need to return more than 1 value, or sometimes
  for efficiency reasons (e.g. need to return 1 million values, we probably
  don't really want to copy them all back).
- In this case, we can pass in values by reference.  
- A reference parameter, if changed in the function, will be changed
  for the caller who provided it.  In effect, a reference parameter is
  not a copy, but it IS the actual variable from the caller, so
  changes to it will be accessible to the caller when the function
  returns.

** Random Library






* Second Session (11:45 - 12:30)

** Recursion

** Function Call Stack
- Example, functions A(), B() and C()
- Recursive
- Some advice/examples on using the Visual Studio debugger.


* Third Session (12:40 - 1:40)

