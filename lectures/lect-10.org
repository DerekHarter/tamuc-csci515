#+TITLE:     Lecture 10 Notes
#+AUTHOR:    Derek Harter
#+EMAIL:     derek@harter.pro
#+DATE:      CSci 515 Spring 2015 <2015-04-07 Tue>
#+DESCRIPTION: Lecture 10 Notes.
#+OPTIONS:   H:4 num:t toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc

* First Session (11 - 11:40)
** Structures in C
- ~struct~ are *aggregrate* data types - they can be built using
  elements of primitive types.
- ~struct~ are basically a *record*, a row of a database or table.
- ~struct~ are an example of a *user defined type*.  Like ~enum~ they
  allow.
- In this course we don't cover object oriented analysis and design,
  but basically classes in C++ are ~struct~ user defined types with
  associated methods that operate on the new type.

** Defining a struct

#+begin_src C
struct Trial
{
   string name;
   string gender;
   float reactionTime; // ms
   int numberOfPresses;
}; // don't forget the semicolon
#+end_src

- By convention, always use an initial upper case letter for user
  defined types.  In the previous example, ~Trial~ is a user defined
  type (an experimental trial record for a single participant).
- Usually a ~struct~ definition should be done globally, it usually
  doesn't make sense to have a new data type that is only defined
  inside of a single local function scope.
  
* Second Session (11:45 - 12:30)
** Another header

* Third Session (12:40 - 1:40)

