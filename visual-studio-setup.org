#+TITLE: CSci 515 Setting Up Visual Studio Express 2010
#+Author:
#+Date:      Spring 2015
#+DESCRIPTION: Setting Up Visual Studio Express 2010
#+OPTIONS:   H:4 num:t toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{array}
#+LATEX_HEADER: \usepackage{color}

* Line Numbers

I prefer to always have line numbers enabled in my source code editor
as most compiler errors/warnings refer to specific line numbers in the
source file, and thus it is easier to quickly determine the potential
location of problems if line numbers are visible.  For Visual Studio
Express 2010 you can enable line numbers like this:

1. Tools $\rightarrow$ Options
2. In Options Dialog, select Text Editor $\rightarrow$ C/C++ $\rightarrow$ General
3. Enable the Line Numbers check box

* Program Indentation and Tab Settings
For this class, you are required to correctly and consistently indent
your code according to the Deitel good programming guidelines, and our
class coding/formatting guidelines.  You can have Visual Studio
Express 2010 automatically set your indentation for you by changing
the following settings:

1. Tools $\rightarrow$ Options
2. In Options Dialog, select Text Editor $\rightarrow$ C/C++ $\rightarrow$ Tabs
3. Set Indenting to Smart
4. Set Tab size to 2
5. Set indent size to 2
6. Select Insert Spaces (rather than Keep tabs)

The last step will keep you from creating files with hardcoded,
embedded tabs, which will not display properly in other editors.

* Automatically Correctly Indent a Region
With tab settings set up correctly, you can actually get Visual Studio
to do most of the work for you in making sure you program is correctly
indented.  Visual Studio has a command to format the selected region.
The formatting will follow the indention and tab settings you have for
your project.  To have Visual Studio format the indentation of a region
for you automatically, do the following:

** Method 1
1. Turn on advance settings from Tools $\rightarrow$ Settings
   $\rightarrow$ Expert Settings
2. Select Edit $\rightarrow$ Advanced $\rightarrow$ Format Selection.

** Method 2
The keyboard shortcut for formatting the selected region automatically is
~Ctrl-k~ ~Ctrl-f~.

* Display/Undisplay Invisible (space) Characters
If you still have problems with getting hardcoded tabs in your source
files, most programming editors have a command that makes normally
invisible whitespace characters become visible, using symbols for the
different types of characters (space, tab, etc.).  To toggle the
display of invisible whitespace characters on and off, you can:

** Method 1
1. Turn on advanced settings from Tools $\rightarrow$ Settings $\rightarrow$ Expert Settings
2. Toggle display of white space on/off from Edit $\rightarrow$ Advanced $\rightarrow$ View Whitespace

** Method 2
The keyboard shortcut for this toggle is ~Ctrl-R~ ~Ctrl-W~.

* Cause Terminal/Console to Persist after Program Execution
You are forbidden to include statements in your submitted programs
whose sole purpose is to keep the terminal from closing upon program
completion, before you can see the output.  Statements like
~system("pause")~ or ~getch()~ are hacks, and are often not portable
to other environments or IDE systems.  When using Visual Studio Express 2010
you can have your IDE keep the console up in the following 2 ways:

** Method 1
Simple use of debugger.  You can simply set a debug breakpoint on the
closing brace of your main function.  Then whenever you run your
program (using Debug $\rightarrow$ Start Debugging or equivalently
using the ~F5~ function key), your program will run till it hits this
breakpoint, and you can then look at the terminal output.

** Method 2
You can also set a property for console applications, so that if you
run without debugging, Visual Studio keeps the terminal open until
you press a key.  You need to set the following property for each
project you create (Visual Studio doesn't enable this by default
on new projects):

1. Project $\rightarrow$ Properties
2. In the Project Property Pages dialog select Configuration Properties $\rightarrow$ Linker $\rightarrow$ System
3. In the Linker System options, pull down the SubSystem property and select Console (/SUBSYSTEM:CONSOLE)
4. Hit OK or Apply to have your property setting saved (for this particular Project only, you have to do this for every project you create).

Now if you run your program without debugging (Debug $\rightarrow$ Start
Without Debugging or equivalently ~Shift-F5~), your terminal will be
paused when the program completes execution.

* Increase/Decrease Editor Font Size
For readability, you can increase/decrease the font size of the Visual
Studio programming editor. Use Ctrl-Shift-, to increase font size,
and ~Ctrl-Shift-.~ to decrease text size.  You can also directly set
the zoom level in the lower left of the editor frame.

* Project Creating Steps for Class Assignments
For this class, you need to submit plain/standard C/C++ code (code that does not use special 3rd party libraries
or frameworks.  One confusing aspect of Visual Studio is that it supports many types of (Microsoft) specific
application and framework targets.  For this class, you should always use an Empty Project, which will allow
you to create programs using standard C/C++ libraries using no external framework.  Always follow these
steps when creating a new project for assignments for this course:

1. File $\rightarrow$ New $\rightarrow$ Project
2. In the New Project Dialog, select Visual C++ $\rightarrow$ General
3. Choose Empty Project (Visual C++) as your project type in the center.
4. Enter an appropriate name for the project.
5. Select OK to create the project.
6. Once your IDE and Solution Explorer open with the newly created project, add a source file.
7. In the Solution Explorer, right click on the Source Files folder
8. Select Add $\rightarrow$ New Item
9. In the Add New Item dialog, select C++ File in the center
10. Choose an appropriate name for you C++ source file, you may be required to name the file with a particular name for an assignment.  If so use the required name for the file.
11. Hit the Add button to create the empty source file and add it to your managed Source Files for the project.
12. Copy the boilerplate C++ Hello World program to your empty file, and make sure that it correctly compiles and runs and generates the expected output.  You can find the official HelloWorld boilerplate on our eCollege course site.

Here is the boiler plate you should use (but don't type this in by hand every time), including the correct file
header and an example function header for the main function.

#+begin_src cpp :includes <iostream> :exports both
/**
 * @author Joe Programmer
 * @cwid   123 45 678
 * @class  CSci 515, Spring 2015
 * @ide    Visual Studio Express 2010
 * @date   January 1, 2015
 * @assg   ExamplAssg00
 *
 * @description A short descrption of the program and its purpose, and
 *    the approach you took in solving the problem.
 */
#include <iostream>
using namespace std;


/** main entry point
 * The main entry point for this program.  Execution
 * of this program will beigin with this function.
 *
 * @returns An int value.  By default, if we don't specify a return or
 *           exit value, 0 is returned to indicate successful program
 *           completion.  A non-zero value indicates an error or
 *           problem with execution.
 */
int main()
{
  cout << "Hello, world!" << endl;

  // return 0 to indicate successful completion
  return 0;
}
#+end_src
