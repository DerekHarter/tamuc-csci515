#+TITLE:     Lab 04: Perfect Numbers
#+AUTHOR:    CSci 515 Spring 2015
#+EMAIL:     derek@harter.pro
#+DATE:      CSci 515 Spring 2014 <2015-01-23 Fri>
#+DESCRIPTION: Lab 04
#+OPTIONS:   H:4 num:nil toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+LATEX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usemintedstyle{default}

* Dates:
| Due: | In Lab, Wednesday February 11, by 4:10 pm (lab end time) |

* Objectives
- Write functions in C that take 1 or more parameters and return a result.
- Learn about breaking up a larger problem into smaller sub-parts.
- More practice using control structures for looping and conditional
  execution in C.
- Practice using the modulus operator as a test for various conditions.

* Description
An integer is said to be a *perfect number* if the sum of its
divisors, including 1 (but not the number itself), is equal to
the number.  For example, the divisors of 6 are 1, 2 and 3 (not
including 6 itself).  A divisor of a number is a number that
evenly divides the original number (leaving no remainder).
6 is a perfect number, because the sum of its divisors is
equal to the original number, e.g.:

$6 = 1 + 2 + 3$

Your overall task is to write a function, called ~findPerfectNumbers()~ that
will find all of the perfect numbers (up to some maximum).  To solve this
task, we will break down the big problem into 2 sub-problems:

1. Write a function, called ~isPerfectNumber()~ that determines whether
   some particular number is a perfect number or not.
2. Write a function, called ~findPerfectNumbers()~


* Lab Submission

An eCollege dropbox has been created for this lab.  You should
upload your version of the lab by the end of lab time to the eCollege
dropbox named ~Lab 04 Process DSV File~.  Work submitted by the end
of lab will be considered, but after the lab ends you may no longer
submit work, so make sure you submit your best effort by the lab end
time in order to receive credit.

* Requirements and Grading Rubrics

** Program Execution, Output and Functional Requirements

1. Your program must compile, run and produce some sort of output to be
  graded. 0 if not satisfied.
1. 10+ pts. Your program must successfully open the file from the current
  working directory. 
1. 20 pts. Your program must successfully read the lines from the file in the
  correct order and attempt to process them.
1. 30+ pts. Your program must use I/O manipulators to achieve the correct output
  format of the cleaned up original data. 
1. 10 pts. Your program must include a header for the original data, properly
  formatted. 
1. 30+ pts. Your program must produce the correct summary information values.
1. 20+ pts. Your program must format the summary information as required, again
  using I/O formatting manipulators.


** Program Style

Your programs must conform to the style and formatting guidelines given for this course.
The following is a list of the guidelines that are required for the lab to be submitted
this week.

1. The file header for the file with your name and program information
  and the function header for your main function must be present, and
  filled out correctly.
1. You must indent your code correctly and have no embedded tabs in
  your source code. (Don't forget about the Visual Studio Format
  Selection command).
1. You must not have any statements that are hacks in order to keep
  your terminal from closing when your program exits.
1. You must have a single space before and after each binary operator.
1. You must have a single blank line after the end of your declaration
  of variables at the top of a function, before the first code
  statement.
1. You must have a single blank space after , and ~;~ operators used as a
  separator in lists of variables, parameters or other control
  structures.
1. You must have opening ~{~ and closing ~}~ for control statement blocks
  on their own line, indented correctly for the level of the control
  statement block.

Failure to conform to any of these formatting and programming practice
guidelines for this lab will result in at least 1/3 of the points (33)
for the assignment being removed.  Failure to follow other
class/textbook programming guidelines may result in a loss of points,
especially for those programming practices given in our Deitel
textbook that have been in our required reading so far.

