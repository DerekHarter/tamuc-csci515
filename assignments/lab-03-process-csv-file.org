#+TITLE:     Lab 03: Processing Data Files
#+AUTHOR:    CSci 515 Spring 2015
#+EMAIL:     derek@harter.pro
#+DATE:      CSci 515 Spring 2014 <2015-01-23 Fri>
#+DESCRIPTION: Lab 02
#+OPTIONS:   H:4 num:nil toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+LATEX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usemintedstyle{default}

* Dates:
| Due: | In Lab, Wednesday February 4, by 4 pm (lab end time)  |

* Objectives
- Be able to Open a serial text file for reading.
- Be able to process a simple text file of comma separated values.
- Use I/O formatting manipulators, for reading and writing formatted data.
- Use loops to read and process line oriented files.
- Get some more practice implementing mathematical formula for data processing tasks.

* Description
Plain text files containing tables of information are very common,
minimal representations of data sets needed for processing.  The
simplest type of formatting of a table of numbers, is to separate the
columns or features of the table using spaces, tabs or commas. In
general these are known as delimiter separated values files.  The most
common is to use commas (known as comma separated values files or CSV
files).  The C++ IOStream operators make it trivial to process space
separated and tab separated value files, since it uses whitespace
(spaces and tabs) by default as the delimiter when breaking apart a
stream to automatically parse and convert into input variables.

An example of a tab separated file is:

#+begin_example
Name	Id	Balance	Interest	Penalty
Derek	123456	540.33	0.02	2.00
Mike	892315	884.28	0.015	5.0
Sarah	184517	1024.38	0.025	2.50
Jane	428146	125.45	0.01	5.0
#+end_example

In a CSV file, the values separated by commas are the features, and
each row is an individual record.  In the previous example, this data
might represent a database of bank account information, with the
customer name, customer Id, their current balance, etc. as features.
In this example file, the first row is a header row, which is present
only to define the names of each of the column features in the table.

For this lab you are to read in records from a CSV file, and do some
processing of the data.  I will give you a CSV file to use.  The CSV file
you are to process has the following format:

#+begin_example
1, 1.25, 2.48, 3.45
2, 3.55, 2.98, 3.85
3, 3.18, 2.98, 1.25
#+end_example


* Extra Credit
If you calculate the approximation of pi correctly using the series,
you will see that using standard cout output it appears that only 6
digits of precision are being calculated (e.g. create a table of size
1000 or bigger).  However, the standard float data type is capable of
representing 16 digits of precision.  The problem is that by default
sending floats to cout only display a few decimal digits.  Find out
how to display all of the calculated digits, using the iostream
library.

* Lab Submission

An eCollege dropbox has been created for this lab.  You should
upload your version of the lab by the end of lab time to the eCollege
dropbox named ~Lab 02 Calculating Pi~.  Work submitted by the end
of lab will be considered, but after the lab ends you may no longer
submit work, so make sure you submit your best effort by the lab end
time in order to receive credit.

* Requirements
Your programs must conform to the style and formatting guidelines given for this course.
The following is a list of the guidelines that are required for the lab to be submitted
this week.

- The file header and function header for your main function must be present, and filled out correctly.
- You must indent your code correctly and have no embedded tabs in your source code. (Don't forget about the Visual Studio Format Selection command).
- You must not have any statements that are hacks in order to keep your terminal from closing when your program exits.
- You must have a single space before and after each binary operator.
- You must have a single blank line after the end of your declaration
  of variables at the top of a function, before the first code
  statement.

Failure to conform to any of these formatting and programming practice
guidelines for this lab will result in a grade of 0 for the lab, and
your program being returned with an indication of which of these items
your program violates.  Failure to follow other class/textbook
programming guidelines may result in a loss of points, especially for
those good programming practices given in chapters 1-5 of our textbook
which you should have read by now.
