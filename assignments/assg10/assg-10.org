#+TITLE:     Assg 10: Iris Data Processing
#+AUTHOR:    CSci 515 Spring 2015
#+EMAIL:     derek@harter.pro
#+DATE:      <2015-04-07 Tue>
#+DESCRIPTION: Assg 10: Shuffling Cards
#+OPTIONS:   H:4 num:nil toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+LATEX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usemintedstyle{default}

* Dates:
| Due: | Tuesday April 14, by Midnight |

* Objectives
- Get more practice defining and using structures.
- Practice using arrays of structs as basic tables.
- Learn to process arrays of structs.

* Description
In this assignment you will extend your lab 10 work.  If you did not
complete the structure and enums defining your Card data type, or the
function to initialize the deck of cards in the lab, you should finish
those parts from the lab first.

You will add the following functionality to your deck of cards
simulation.  You will add a display function that can be used to
display the cards in an array of cards.  You will also add a shuffle
function, to shuffle up the deck of cards.  Finally you will add
a function that will play a simple game with the deck of cards.

Perform the following tasks:

1. Create a function called ~displayCards~.  This function should take
   an array of your Cards, and a begin and end index.  The function
   should display the cards in the indicated index range to standard
   output.  The begin index is inclusive, but the end index is not
   inclusive, so if asked to display cards from begin index 0 to end
   index 5, it will display the cards at indexes 0, 1, 2, 3 and 4.
   See the example output below for how the output should be
   displayed.

Here is an example output from running a correct assignment to find the
primes in the range from 2 to 100.  You can find lists of primes online
if you want to further test if your program is working, for example
here: https://primes.utm.edu/lists/small/1000.txt.

#+begin_example
$ ./assg09
Discovered primes in range 2 to 100: 2 3 5 7 11 13 17 19 23 29 
  31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
#+end_example

As a final test of your work, and to demonstrate that the sieve
algorithm is really quite efficient, find the largest prime number
that is $\le 1 000 000$ (1 million).  Report which number you found as
a comment when you submit your assignment 09 to the eCollege dropbox.

*NOTE*: Now that our programs have more functions than just the
~main()~ function, the use of the function headers becomes meaningful
and required.  Make sure that all of your functions have function
headers preceding them that document the purpose of the functions, and
the input parameters and return value of the function.

* Assignment Submission

An eCollege dropbox has been created for this assignment.  You should
upload your version of the assignment to the eCollege dropbox named
~Assg 09 Sieve of Eratosthenes~ created for this submission.  Work
submitted by the due date will be considered for evaluation.

* Requirements and Grading Rubrics

** Program Execution, Output and Functional Requirements

1. Your program must compile, run and produce some sort of output to
   be graded. 0 if not satisfied.
1. 60+ pts. For the correct implementation of the three helper functions.
1. 30+ pts. For implementing the Sieve of Eratosthenes algorithm and functions
   correctly, and using the functions as described above.
1. 10+ pts. Your main function should create the array of boolean values
   and demonstrate using your functions to find and display the primes in
   the first 10,000 integers.


** Program Style

Your programs must conform to the style and formatting guidelines
given for this course.  The following is a list of the guidelines that
are required for the assignment to be submitted this week.

1. The file header for the file with your name and program information
  and the function header for your main function must be present, and
  filled out correctly.
1. A function header must be present for all functions you define.
   You must document the purpose, input parameters and return values
   of all functions.  Your function headers must be formatted exactly
   as shown in the style guidelines for the class.
1. You must indent your code correctly and have no embedded tabs in
  your source code. (Don't forget about the Visual Studio Format
  Selection command).
1. You must not have any statements that are hacks in order to keep
   your terminal from closing when your program exits (e.g. no calls
   to system() ).
1. You must have a single space before and after each binary operator.
1. You must have a single blank line after the end of your declaration
  of variables at the top of a function, before the first code
  statement.
1. You must have a single blank space after , and ~;~ operators used as a
  separator in lists of variables, parameters or other control
  structures.
1. You must have opening ~{~ and closing ~}~ for control statement blocks
  on their own line, indented correctly for the level of the control
  statement block.
1. All control statement blocks (if, for, while, etc.) must have ~{~
   ~}~ enclosing them, even when they are not strictly necessary
   (when there is only 1 statement in the block).
1. You should attempt to use meaningful variable and function names in
   your program, for program clarity.  Of course, when required, you
   must name functions, parameters and variables as specified in the
   assignments.  Variable and function names must conform to correct
   ~camelCaseNameingConvention~ .

Failure to conform to any of these formatting and programming practice
guidelines for this assignment will result in at least 1/3 of the
points (33) for the assignment being removed for each guideline that
is not followed (up to 3 before getting a 0 for the
assignment). Failure to follow other class/textbook programming
guidelines may result in a loss of points, especially for those
programming practices given in our Deitel textbook that have been in
our required reading so far.

